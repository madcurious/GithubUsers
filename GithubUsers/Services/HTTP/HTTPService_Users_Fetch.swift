//
//  HTTPService_Users_Fetch.swift
//  GithubUsers
//
//  Created by Matthew Quiros on 8/5/20.
//  Copyright Â© 2020 Matthew Quiros. All rights reserved.
//

import Foundation

extension HTTPService.Users {
	
	/// Fetches a list of Github users following a specified user ID.
	class Fetch: AsyncOperation<[RawUserListItem], Error> {
		
		let userID: Int
		let urlSession: URLSession
		
		fileprivate var task: URLSessionDataTask?
		
		/// - Parameters:
		///		- userID: The user ID to be provided in Github API's `since` parameter.
		///		- urlSession: The `URLSession` for coordinating the data task.
		///		- completion: Executed when the operation finishes.		
		init(since userID: Int, urlSession: URLSession = HTTPService.urlSession, completion: OperationCompletionBlock?) {
			self.userID = userID
			self.urlSession = urlSession
			super.init(completionBlock: completion)
		}
		
		override func main() {
			do {
				task = try Fetch.execute(since: userID, urlSession: urlSession, responseHandler: { (data, response, error) in
					self.handleResponse(data, response, error)
				})
			} catch {
				result = .failure(error)
			}
		}
		
		override func cancel() {
			super.cancel()
			task?.cancel()
		}
		
		func handleResponse(_ data: Data?, _ response: URLResponse?, _ error: Error?) {
			defer {
				self.finish()
			}
			
			if self.isCancelled {
				return
			}
			
			if let error = error {
				self.result = .failure(error)
				return
			}
			
			guard let data = data
				else {
					self.result = .failure(HTTPServiceError.serverReturnedNoData)
					return
			}
			
			if self.isCancelled {
				return
			}
			
			do {
				let result = try JSONDecoder().decode([RawUserListItem].self, from: data)
				self.result = .success(result)
			} catch {
				self.result = .failure(error)
			}
		}
		
		// MARK: - Class functions
		
		class func makeURL(using userID: Int) throws -> URL {
			var components = GithubAPI.baseURLComponents
			components.path = "/users"
			components.queryItems = [URLQueryItem(name: "since", value: "\(userID)")]
			if let url = components.url {
				return url
			} else {
				throw HTTPServiceError.invalidUrl(components.debugDescription)
			}
		}
		
		/// Creates and runs a data task that fetches a list of Github users after a given user ID.
		/// - Parameters:
		///		- userID: The user ID to be provided in Github API's `since` parameter.
		///		- urlSession: The `URLSession` for coordinating the data task.
		///		- responseHandler: The closure to be invoked when the data task returns with a response.
		@discardableResult
		class func execute(since userID: Int, urlSession: URLSession, responseHandler: ((Data?, URLResponse?, Error?) -> Void)?) throws -> URLSessionDataTask {
			let url = try makeURL(using: userID)
			var urlRequest = URLRequest(url: url)
			urlRequest.httpMethod = HTTPMethod.get.rawValue

			let task = urlSession.dataTask(with: urlRequest) { (data, response, error) in
				responseHandler?(data, response, error)
			}
			task.resume()
			return task
		}
		
		/// Creates a default handler for when the data task returns. The default handler does the exact same thing as `Fetch.handleResponse()`
		/// except without checking for whether the task or operation has been cancelled.
		/// - Parameters:
		///		- completion: The completion block to be invoked by the default handler once a result is available.
		///		- result: The result generated by the default response handler.
		/// - Returns: A closure that can take the arguments provided by a data task when it returns from a request.
		class func makeDefaultResponseHandler(completion: @escaping (_ result: Fetch.ResultType) -> Void) -> ((Data?, URLResponse?, Error?) -> Void) {
			return { (data, response, error) in
				if let error = error {
					completion(.failure(error))
					return
				}
				guard let data = data
					else {
						completion(.failure(HTTPServiceError.serverReturnedNoData))
						return
				}
				do {
					let result = try JSONDecoder().decode([RawUserListItem].self, from: data)
					completion(.success(result))
				} catch {
					completion(.failure(error))
				}
			}
		}
		
	}
}
